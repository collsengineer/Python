#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Each new term in the Fibonacci sequence is generated by adding 
the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values 
do not exceed four million, find the sum of the even-valued terms
"""


def main():
    # list comprehension to display all of the Fibonacci sequence values
    fibonacci_sequence = [fibonacci_of(n) for n in range(32 + 1)]

    # list comprehension to display just the even values of the Fibonacci sequence
    even_fibonacci_sum = [i for i in fibonacci_sequence if i % 2 == 0]
    print(sum(even_fibonacci_sum))


def fibonacci_of(n: int) -> int:
    """Fibonacci sequence by recursive algorithm, returning just the last value"""

    if n == 0 or n == 1:
        return 1

    return fibonacci_of(n - 1) + fibonacci_of(n - 2)


if __name__ == "__main__":
    main()
